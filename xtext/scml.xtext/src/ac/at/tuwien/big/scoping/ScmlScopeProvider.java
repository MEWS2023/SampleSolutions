/*
 * generated by Xtext 2.31.0
 */
package ac.at.tuwien.big.scoping;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

import scml.InfrastructureComponent;
import scml.KPIMeasurementDevice;
import scml.Parameter;
import scml.Project;
import scml.ScmlPackage;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */


public class ScmlScopeProvider extends AbstractDeclarativeScopeProvider {
	
	IScope scope_KPIMeasurementDevice_parameter(KPIMeasurementDevice indicator, EReference reference) {
		if(reference.equals(ScmlPackage.Literals.KPI_MEASUREMENT_DEVICE__PARAMETER)) {
			
			Project project = (Project)indicator.eContainer();
			List<Parameter> parameters = (ArrayList<Parameter>) project.getComponent().stream()
					.map(InfrastructureComponent::getParameter)
					.filter(parameter -> indicator.getName().toLowerCase().contains(parameter.getName().toLowerCase()))
					.collect(Collectors.toList());
			
			System.out.println("Params start");
			parameters.stream().forEach(e -> System.out.println(e));
			System.out.println("Params start");
			
			return Scopes.scopeFor(parameters);
		}
		return IScope.NULLSCOPE;
	}
	
	IScope scope_Parameter_component(Parameter parameter, EReference reference) {
		if(reference.equals(ScmlPackage.Literals.PARAMETER__COMPONENT)) {
			InfrastructureComponent component = (InfrastructureComponent)parameter.eContainer();
			
			List<InfrastructureComponent> components = new ArrayList<InfrastructureComponent>();
			components.add(component);
			
			return Scopes.scopeFor(components);
		}
		return IScope.NULLSCOPE;
	}
	IScope scope_InfrastructureComponent_isPartOf(InfrastructureComponent component, EReference reference) {
		if(reference.equals(ScmlPackage.Literals.INFRASTRUCTURE_COMPONENT__IS_PART_OF)) {
			Project project = (Project ) component.eContainer();
			List<InfrastructureComponent> components = project.getComponent().stream()
					.filter(c -> !c.equals(component))
					.filter(c -> (c.getIsPartOf() != null && !c.getIsPartOf().equals(component)) || c.getIsPartOf() == null)
					.collect(Collectors.toList());
			
			System.out.println("All available component of - " + component.getName());
			for(InfrastructureComponent c: components) {
				System.out.println(c.getName());
			}
			System.out.println("Done!");
			return Scopes.scopeFor(components);			
		}
		
		return IScope.NULLSCOPE;
	}
}