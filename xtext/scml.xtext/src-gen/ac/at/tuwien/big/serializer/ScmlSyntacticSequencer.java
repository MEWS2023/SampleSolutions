/*
 * generated by Xtext 2.31.0
 */
package ac.at.tuwien.big.serializer;

import ac.at.tuwien.big.services.ScmlGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class ScmlSyntacticSequencer extends AbstractSyntacticSequencer {

	protected ScmlGrammarAccess grammarAccess;
	protected AbstractElementAlias match_BuildingComponent_EnvironmentalComponent_TransportationComponent___RightCurlyBracketKeyword_5_1_p_or_RightCurlyBracketKeyword_5_1_p_or_RightCurlyBracketKeyword_5_1_p__q;
	protected AbstractElementAlias match_BuildingComponent_RightCurlyBracketKeyword_5_1_a;
	protected AbstractElementAlias match_BuildingComponent_RightCurlyBracketKeyword_5_1_p;
	protected AbstractElementAlias match_EnvironmentalComponent_RightCurlyBracketKeyword_5_1_a;
	protected AbstractElementAlias match_EnvironmentalComponent_RightCurlyBracketKeyword_5_1_p;
	protected AbstractElementAlias match_Parameter_RightCurlyBracketKeyword_2_1_a;
	protected AbstractElementAlias match_Parameter_RightCurlyBracketKeyword_2_1_p;
	protected AbstractElementAlias match_Project_RightCurlyBracketKeyword_1_1_a;
	protected AbstractElementAlias match_Project_RightCurlyBracketKeyword_1_1_p;
	protected AbstractElementAlias match_TransportationComponent_RightCurlyBracketKeyword_5_1_a;
	protected AbstractElementAlias match_TransportationComponent_RightCurlyBracketKeyword_5_1_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ScmlGrammarAccess) access;
		match_BuildingComponent_EnvironmentalComponent_TransportationComponent___RightCurlyBracketKeyword_5_1_p_or_RightCurlyBracketKeyword_5_1_p_or_RightCurlyBracketKeyword_5_1_p__q = new AlternativeAlias(false, true, new TokenAlias(true, false, grammarAccess.getBuildingComponentAccess().getRightCurlyBracketKeyword_5_1()), new TokenAlias(true, false, grammarAccess.getEnvironmentalComponentAccess().getRightCurlyBracketKeyword_5_1()), new TokenAlias(true, false, grammarAccess.getTransportationComponentAccess().getRightCurlyBracketKeyword_5_1()));
		match_BuildingComponent_RightCurlyBracketKeyword_5_1_a = new TokenAlias(true, true, grammarAccess.getBuildingComponentAccess().getRightCurlyBracketKeyword_5_1());
		match_BuildingComponent_RightCurlyBracketKeyword_5_1_p = new TokenAlias(true, false, grammarAccess.getBuildingComponentAccess().getRightCurlyBracketKeyword_5_1());
		match_EnvironmentalComponent_RightCurlyBracketKeyword_5_1_a = new TokenAlias(true, true, grammarAccess.getEnvironmentalComponentAccess().getRightCurlyBracketKeyword_5_1());
		match_EnvironmentalComponent_RightCurlyBracketKeyword_5_1_p = new TokenAlias(true, false, grammarAccess.getEnvironmentalComponentAccess().getRightCurlyBracketKeyword_5_1());
		match_Parameter_RightCurlyBracketKeyword_2_1_a = new TokenAlias(true, true, grammarAccess.getParameterAccess().getRightCurlyBracketKeyword_2_1());
		match_Parameter_RightCurlyBracketKeyword_2_1_p = new TokenAlias(true, false, grammarAccess.getParameterAccess().getRightCurlyBracketKeyword_2_1());
		match_Project_RightCurlyBracketKeyword_1_1_a = new TokenAlias(true, true, grammarAccess.getProjectAccess().getRightCurlyBracketKeyword_1_1());
		match_Project_RightCurlyBracketKeyword_1_1_p = new TokenAlias(true, false, grammarAccess.getProjectAccess().getRightCurlyBracketKeyword_1_1());
		match_TransportationComponent_RightCurlyBracketKeyword_5_1_a = new TokenAlias(true, true, grammarAccess.getTransportationComponentAccess().getRightCurlyBracketKeyword_5_1());
		match_TransportationComponent_RightCurlyBracketKeyword_5_1_p = new TokenAlias(true, false, grammarAccess.getTransportationComponentAccess().getRightCurlyBracketKeyword_5_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_BuildingComponent_EnvironmentalComponent_TransportationComponent___RightCurlyBracketKeyword_5_1_p_or_RightCurlyBracketKeyword_5_1_p_or_RightCurlyBracketKeyword_5_1_p__q.equals(syntax))
				emit_BuildingComponent_EnvironmentalComponent_TransportationComponent___RightCurlyBracketKeyword_5_1_p_or_RightCurlyBracketKeyword_5_1_p_or_RightCurlyBracketKeyword_5_1_p__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BuildingComponent_RightCurlyBracketKeyword_5_1_a.equals(syntax))
				emit_BuildingComponent_RightCurlyBracketKeyword_5_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BuildingComponent_RightCurlyBracketKeyword_5_1_p.equals(syntax))
				emit_BuildingComponent_RightCurlyBracketKeyword_5_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EnvironmentalComponent_RightCurlyBracketKeyword_5_1_a.equals(syntax))
				emit_EnvironmentalComponent_RightCurlyBracketKeyword_5_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EnvironmentalComponent_RightCurlyBracketKeyword_5_1_p.equals(syntax))
				emit_EnvironmentalComponent_RightCurlyBracketKeyword_5_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Parameter_RightCurlyBracketKeyword_2_1_a.equals(syntax))
				emit_Parameter_RightCurlyBracketKeyword_2_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Parameter_RightCurlyBracketKeyword_2_1_p.equals(syntax))
				emit_Parameter_RightCurlyBracketKeyword_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Project_RightCurlyBracketKeyword_1_1_a.equals(syntax))
				emit_Project_RightCurlyBracketKeyword_1_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Project_RightCurlyBracketKeyword_1_1_p.equals(syntax))
				emit_Project_RightCurlyBracketKeyword_1_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TransportationComponent_RightCurlyBracketKeyword_5_1_a.equals(syntax))
				emit_TransportationComponent_RightCurlyBracketKeyword_5_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TransportationComponent_RightCurlyBracketKeyword_5_1_p.equals(syntax))
				emit_TransportationComponent_RightCurlyBracketKeyword_5_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('}'+ | '}'+ | '}'+)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_BuildingComponent_EnvironmentalComponent_TransportationComponent___RightCurlyBracketKeyword_5_1_p_or_RightCurlyBracketKeyword_5_1_p_or_RightCurlyBracketKeyword_5_1_p__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '}'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'BuildingComponent' name=EString
	 *     (rule start) (ambiguity) 'buildingComponentData' '{' produces+=DataValue
	 *     (rule start) (ambiguity) 'buildingComponentDevices' '[' device+=Device
	 *     (rule start) (ambiguity) 'buildingComponentLocation' ':' location=Location
	 *     (rule start) (ambiguity) 'buildingComponentParameter' parameter=Parameter
	 *     (rule start) (ambiguity) 'buildingComponentSub' '[' composedOf+=[InfrastructureComponent|ID]
	 *     (rule start) (ambiguity) (rule start)
	 *     composedOf+=[InfrastructureComponent|ID] ']' (ambiguity) 'BuildingComponent' name=EString
	 *     composedOf+=[InfrastructureComponent|ID] ']' (ambiguity) 'buildingComponentData' '{' produces+=DataValue
	 *     composedOf+=[InfrastructureComponent|ID] ']' (ambiguity) 'buildingComponentDevices' '[' device+=Device
	 *     composedOf+=[InfrastructureComponent|ID] ']' (ambiguity) 'buildingComponentLocation' ':' location=Location
	 *     composedOf+=[InfrastructureComponent|ID] ']' (ambiguity) 'buildingComponentParameter' parameter=Parameter
	 *     composedOf+=[InfrastructureComponent|ID] ']' (ambiguity) 'buildingComponentSub' '[' composedOf+=[InfrastructureComponent|ID]
	 *     composedOf+=[InfrastructureComponent|ID] ']' (ambiguity) (rule end)
	 *     isPartOf=[InfrastructureComponent|ID] (ambiguity) 'BuildingComponent' name=EString
	 *     isPartOf=[InfrastructureComponent|ID] (ambiguity) 'buildingComponentData' '{' produces+=DataValue
	 *     isPartOf=[InfrastructureComponent|ID] (ambiguity) 'buildingComponentDevices' '[' device+=Device
	 *     isPartOf=[InfrastructureComponent|ID] (ambiguity) 'buildingComponentLocation' ':' location=Location
	 *     isPartOf=[InfrastructureComponent|ID] (ambiguity) 'buildingComponentParameter' parameter=Parameter
	 *     isPartOf=[InfrastructureComponent|ID] (ambiguity) 'buildingComponentSub' '[' composedOf+=[InfrastructureComponent|ID]
	 *     isPartOf=[InfrastructureComponent|ID] (ambiguity) (rule end)
	 *     location=Location (ambiguity) 'BuildingComponent' name=EString
	 *     location=Location (ambiguity) 'buildingComponentData' '{' produces+=DataValue
	 *     location=Location (ambiguity) 'buildingComponentDevices' '[' device+=Device
	 *     location=Location (ambiguity) 'buildingComponentLocation' ':' location=Location
	 *     location=Location (ambiguity) 'buildingComponentParameter' parameter=Parameter
	 *     location=Location (ambiguity) 'buildingComponentSub' '[' composedOf+=[InfrastructureComponent|ID]
	 *     location=Location (ambiguity) (rule end)
	 *     name=EString '{' (ambiguity) 'BuildingComponent' name=EString
	 *     name=EString '{' (ambiguity) 'buildingComponentData' '{' produces+=DataValue
	 *     name=EString '{' (ambiguity) 'buildingComponentDevices' '[' device+=Device
	 *     name=EString '{' (ambiguity) 'buildingComponentLocation' ':' location=Location
	 *     name=EString '{' (ambiguity) 'buildingComponentParameter' parameter=Parameter
	 *     name=EString '{' (ambiguity) 'buildingComponentSub' '[' composedOf+=[InfrastructureComponent|ID]
	 *     name=EString '{' (ambiguity) (rule end)
	 *     parameter=Parameter (ambiguity) 'BuildingComponent' name=EString
	 *     parameter=Parameter (ambiguity) 'buildingComponentData' '{' produces+=DataValue
	 *     parameter=Parameter (ambiguity) 'buildingComponentDevices' '[' device+=Device
	 *     parameter=Parameter (ambiguity) 'buildingComponentLocation' ':' location=Location
	 *     parameter=Parameter (ambiguity) 'buildingComponentParameter' parameter=Parameter
	 *     parameter=Parameter (ambiguity) 'buildingComponentSub' '[' composedOf+=[InfrastructureComponent|ID]
	 *     parameter=Parameter (ambiguity) (rule end)
	 *     produces+=DataValue '}' (ambiguity) 'BuildingComponent' name=EString
	 *     produces+=DataValue '}' (ambiguity) 'buildingComponentData' '{' produces+=DataValue
	 *     produces+=DataValue '}' (ambiguity) 'buildingComponentDevices' '[' device+=Device
	 *     produces+=DataValue '}' (ambiguity) 'buildingComponentLocation' ':' location=Location
	 *     produces+=DataValue '}' (ambiguity) 'buildingComponentParameter' parameter=Parameter
	 *     produces+=DataValue '}' (ambiguity) 'buildingComponentSub' '[' composedOf+=[InfrastructureComponent|ID]
	 *     produces+=DataValue '}' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_BuildingComponent_RightCurlyBracketKeyword_5_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '}'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     device+=Device ']' (ambiguity) 'BuildingComponent' name=EString
	 *     device+=Device ']' (ambiguity) 'buildingComponentData' '{' produces+=DataValue
	 *     device+=Device ']' (ambiguity) 'buildingComponentDevices' '[' device+=Device
	 *     device+=Device ']' (ambiguity) 'buildingComponentLocation' ':' location=Location
	 *     device+=Device ']' (ambiguity) 'buildingComponentParameter' parameter=Parameter
	 *     device+=Device ']' (ambiguity) 'buildingComponentSub' '[' composedOf+=[InfrastructureComponent|ID]
	 *     device+=Device ']' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_BuildingComponent_RightCurlyBracketKeyword_5_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '}'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'EnvironmentalComponent' name=EString
	 *     (rule start) (ambiguity) 'environmentalComponentData' '{' produces+=DataValue
	 *     (rule start) (ambiguity) 'environmentalComponentDevices' '[' device+=Device
	 *     (rule start) (ambiguity) 'environmentalComponentLocation' ':' location=Location
	 *     (rule start) (ambiguity) 'environmentalComponentParameter' parameter=Parameter
	 *     (rule start) (ambiguity) 'environmentalComponentSub' '[' composedOf+=[InfrastructureComponent|ID]
	 *     (rule start) (ambiguity) (rule start)
	 *     composedOf+=[InfrastructureComponent|ID] ']' (ambiguity) 'EnvironmentalComponent' name=EString
	 *     composedOf+=[InfrastructureComponent|ID] ']' (ambiguity) 'environmentalComponentData' '{' produces+=DataValue
	 *     composedOf+=[InfrastructureComponent|ID] ']' (ambiguity) 'environmentalComponentDevices' '[' device+=Device
	 *     composedOf+=[InfrastructureComponent|ID] ']' (ambiguity) 'environmentalComponentLocation' ':' location=Location
	 *     composedOf+=[InfrastructureComponent|ID] ']' (ambiguity) 'environmentalComponentParameter' parameter=Parameter
	 *     composedOf+=[InfrastructureComponent|ID] ']' (ambiguity) 'environmentalComponentSub' '[' composedOf+=[InfrastructureComponent|ID]
	 *     composedOf+=[InfrastructureComponent|ID] ']' (ambiguity) (rule end)
	 *     isPartOf=[InfrastructureComponent|ID] (ambiguity) 'EnvironmentalComponent' name=EString
	 *     isPartOf=[InfrastructureComponent|ID] (ambiguity) 'environmentalComponentData' '{' produces+=DataValue
	 *     isPartOf=[InfrastructureComponent|ID] (ambiguity) 'environmentalComponentDevices' '[' device+=Device
	 *     isPartOf=[InfrastructureComponent|ID] (ambiguity) 'environmentalComponentLocation' ':' location=Location
	 *     isPartOf=[InfrastructureComponent|ID] (ambiguity) 'environmentalComponentParameter' parameter=Parameter
	 *     isPartOf=[InfrastructureComponent|ID] (ambiguity) 'environmentalComponentSub' '[' composedOf+=[InfrastructureComponent|ID]
	 *     isPartOf=[InfrastructureComponent|ID] (ambiguity) (rule end)
	 *     location=Location (ambiguity) 'EnvironmentalComponent' name=EString
	 *     location=Location (ambiguity) 'environmentalComponentData' '{' produces+=DataValue
	 *     location=Location (ambiguity) 'environmentalComponentDevices' '[' device+=Device
	 *     location=Location (ambiguity) 'environmentalComponentLocation' ':' location=Location
	 *     location=Location (ambiguity) 'environmentalComponentParameter' parameter=Parameter
	 *     location=Location (ambiguity) 'environmentalComponentSub' '[' composedOf+=[InfrastructureComponent|ID]
	 *     location=Location (ambiguity) (rule end)
	 *     name=EString '{' (ambiguity) 'EnvironmentalComponent' name=EString
	 *     name=EString '{' (ambiguity) 'environmentalComponentData' '{' produces+=DataValue
	 *     name=EString '{' (ambiguity) 'environmentalComponentDevices' '[' device+=Device
	 *     name=EString '{' (ambiguity) 'environmentalComponentLocation' ':' location=Location
	 *     name=EString '{' (ambiguity) 'environmentalComponentParameter' parameter=Parameter
	 *     name=EString '{' (ambiguity) 'environmentalComponentSub' '[' composedOf+=[InfrastructureComponent|ID]
	 *     name=EString '{' (ambiguity) (rule end)
	 *     parameter=Parameter (ambiguity) 'EnvironmentalComponent' name=EString
	 *     parameter=Parameter (ambiguity) 'environmentalComponentData' '{' produces+=DataValue
	 *     parameter=Parameter (ambiguity) 'environmentalComponentDevices' '[' device+=Device
	 *     parameter=Parameter (ambiguity) 'environmentalComponentLocation' ':' location=Location
	 *     parameter=Parameter (ambiguity) 'environmentalComponentParameter' parameter=Parameter
	 *     parameter=Parameter (ambiguity) 'environmentalComponentSub' '[' composedOf+=[InfrastructureComponent|ID]
	 *     parameter=Parameter (ambiguity) (rule end)
	 *     produces+=DataValue '}' (ambiguity) 'EnvironmentalComponent' name=EString
	 *     produces+=DataValue '}' (ambiguity) 'environmentalComponentData' '{' produces+=DataValue
	 *     produces+=DataValue '}' (ambiguity) 'environmentalComponentDevices' '[' device+=Device
	 *     produces+=DataValue '}' (ambiguity) 'environmentalComponentLocation' ':' location=Location
	 *     produces+=DataValue '}' (ambiguity) 'environmentalComponentParameter' parameter=Parameter
	 *     produces+=DataValue '}' (ambiguity) 'environmentalComponentSub' '[' composedOf+=[InfrastructureComponent|ID]
	 *     produces+=DataValue '}' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_EnvironmentalComponent_RightCurlyBracketKeyword_5_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '}'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     device+=Device ']' (ambiguity) 'EnvironmentalComponent' name=EString
	 *     device+=Device ']' (ambiguity) 'environmentalComponentData' '{' produces+=DataValue
	 *     device+=Device ']' (ambiguity) 'environmentalComponentDevices' '[' device+=Device
	 *     device+=Device ']' (ambiguity) 'environmentalComponentLocation' ':' location=Location
	 *     device+=Device ']' (ambiguity) 'environmentalComponentParameter' parameter=Parameter
	 *     device+=Device ']' (ambiguity) 'environmentalComponentSub' '[' composedOf+=[InfrastructureComponent|ID]
	 *     device+=Device ']' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_EnvironmentalComponent_RightCurlyBracketKeyword_5_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '}'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'dataSource' ':' component=[InfrastructureComponent|ID]
	 *     (rule start) (ambiguity) 'observedValue' observedValue=AggregatedValue
	 *     (rule start) (ambiguity) name=EString
	 *     component=[InfrastructureComponent|ID] (ambiguity) 'dataSource' ':' component=[InfrastructureComponent|ID]
	 *     component=[InfrastructureComponent|ID] (ambiguity) 'observedValue' observedValue=AggregatedValue
	 *     component=[InfrastructureComponent|ID] (ambiguity) (rule end)
	 *     component=[InfrastructureComponent|ID] (ambiguity) name=EString
	 *     goalreferencevalue=GoalReferenceValue (ambiguity) 'dataSource' ':' component=[InfrastructureComponent|ID]
	 *     goalreferencevalue=GoalReferenceValue (ambiguity) 'observedValue' observedValue=AggregatedValue
	 *     goalreferencevalue=GoalReferenceValue (ambiguity) (rule end)
	 *     goalreferencevalue=GoalReferenceValue (ambiguity) name=EString
	 
	 * </pre>
	 */
	protected void emit_Parameter_RightCurlyBracketKeyword_2_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '}'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     observedValue=AggregatedValue (ambiguity) 'dataSource' ':' component=[InfrastructureComponent|ID]
	 *     observedValue=AggregatedValue (ambiguity) 'observedValue' observedValue=AggregatedValue
	 *     observedValue=AggregatedValue (ambiguity) (rule end)
	 *     observedValue=AggregatedValue (ambiguity) name=EString
	 
	 * </pre>
	 */
	protected void emit_Parameter_RightCurlyBracketKeyword_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '}'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'indicators' '[' indicator+=KPIMeasurementDevice
	 *     (rule start) (ambiguity) name=EString
	 *     category+=[Category|ID] ')' '{' (ambiguity) 'indicators' '[' indicator+=KPIMeasurementDevice
	 *     category+=[Category|ID] ')' '{' (ambiguity) (rule end)
	 *     category+=[Category|ID] ')' '{' (ambiguity) name=EString
	 *     component+=InfrastructureComponent ']' (ambiguity) 'indicators' '[' indicator+=KPIMeasurementDevice
	 *     component+=InfrastructureComponent ']' (ambiguity) (rule end)
	 *     component+=InfrastructureComponent ']' (ambiguity) name=EString
	 *     name=EString '{' (ambiguity) 'indicators' '[' indicator+=KPIMeasurementDevice
	 *     name=EString '{' (ambiguity) (rule end)
	 *     name=EString '{' (ambiguity) name=EString
	 
	 * </pre>
	 */
	protected void emit_Project_RightCurlyBracketKeyword_1_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '}'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     indicator+=KPIMeasurementDevice ']' (ambiguity) 'indicators' '[' indicator+=KPIMeasurementDevice
	 *     indicator+=KPIMeasurementDevice ']' (ambiguity) (rule end)
	 *     indicator+=KPIMeasurementDevice ']' (ambiguity) name=EString
	 
	 * </pre>
	 */
	protected void emit_Project_RightCurlyBracketKeyword_1_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '}'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'TransportationComponent' name=EString
	 *     (rule start) (ambiguity) 'transportComponentData' '{' produces+=DataValue
	 *     (rule start) (ambiguity) 'transportComponentDevices' '[' device+=Device
	 *     (rule start) (ambiguity) 'transportComponentLocation' ':' location=Location
	 *     (rule start) (ambiguity) 'transportComponentParameter' parameter=Parameter
	 *     (rule start) (ambiguity) 'transportationComponentSub' '[' composedOf+=[InfrastructureComponent|ID]
	 *     (rule start) (ambiguity) (rule start)
	 *     composedOf+=[InfrastructureComponent|ID] ']' (ambiguity) 'TransportationComponent' name=EString
	 *     composedOf+=[InfrastructureComponent|ID] ']' (ambiguity) 'transportComponentData' '{' produces+=DataValue
	 *     composedOf+=[InfrastructureComponent|ID] ']' (ambiguity) 'transportComponentDevices' '[' device+=Device
	 *     composedOf+=[InfrastructureComponent|ID] ']' (ambiguity) 'transportComponentLocation' ':' location=Location
	 *     composedOf+=[InfrastructureComponent|ID] ']' (ambiguity) 'transportComponentParameter' parameter=Parameter
	 *     composedOf+=[InfrastructureComponent|ID] ']' (ambiguity) 'transportationComponentSub' '[' composedOf+=[InfrastructureComponent|ID]
	 *     composedOf+=[InfrastructureComponent|ID] ']' (ambiguity) (rule end)
	 *     isPartOf=[InfrastructureComponent|ID] (ambiguity) 'TransportationComponent' name=EString
	 *     isPartOf=[InfrastructureComponent|ID] (ambiguity) 'transportComponentData' '{' produces+=DataValue
	 *     isPartOf=[InfrastructureComponent|ID] (ambiguity) 'transportComponentDevices' '[' device+=Device
	 *     isPartOf=[InfrastructureComponent|ID] (ambiguity) 'transportComponentLocation' ':' location=Location
	 *     isPartOf=[InfrastructureComponent|ID] (ambiguity) 'transportComponentParameter' parameter=Parameter
	 *     isPartOf=[InfrastructureComponent|ID] (ambiguity) 'transportationComponentSub' '[' composedOf+=[InfrastructureComponent|ID]
	 *     isPartOf=[InfrastructureComponent|ID] (ambiguity) (rule end)
	 *     location=Location (ambiguity) 'TransportationComponent' name=EString
	 *     location=Location (ambiguity) 'transportComponentData' '{' produces+=DataValue
	 *     location=Location (ambiguity) 'transportComponentDevices' '[' device+=Device
	 *     location=Location (ambiguity) 'transportComponentLocation' ':' location=Location
	 *     location=Location (ambiguity) 'transportComponentParameter' parameter=Parameter
	 *     location=Location (ambiguity) 'transportationComponentSub' '[' composedOf+=[InfrastructureComponent|ID]
	 *     location=Location (ambiguity) (rule end)
	 *     name=EString '{' (ambiguity) 'TransportationComponent' name=EString
	 *     name=EString '{' (ambiguity) 'transportComponentData' '{' produces+=DataValue
	 *     name=EString '{' (ambiguity) 'transportComponentDevices' '[' device+=Device
	 *     name=EString '{' (ambiguity) 'transportComponentLocation' ':' location=Location
	 *     name=EString '{' (ambiguity) 'transportComponentParameter' parameter=Parameter
	 *     name=EString '{' (ambiguity) 'transportationComponentSub' '[' composedOf+=[InfrastructureComponent|ID]
	 *     name=EString '{' (ambiguity) (rule end)
	 *     parameter=Parameter (ambiguity) 'TransportationComponent' name=EString
	 *     parameter=Parameter (ambiguity) 'transportComponentData' '{' produces+=DataValue
	 *     parameter=Parameter (ambiguity) 'transportComponentDevices' '[' device+=Device
	 *     parameter=Parameter (ambiguity) 'transportComponentLocation' ':' location=Location
	 *     parameter=Parameter (ambiguity) 'transportComponentParameter' parameter=Parameter
	 *     parameter=Parameter (ambiguity) 'transportationComponentSub' '[' composedOf+=[InfrastructureComponent|ID]
	 *     parameter=Parameter (ambiguity) (rule end)
	 *     produces+=DataValue '}' (ambiguity) 'TransportationComponent' name=EString
	 *     produces+=DataValue '}' (ambiguity) 'transportComponentData' '{' produces+=DataValue
	 *     produces+=DataValue '}' (ambiguity) 'transportComponentDevices' '[' device+=Device
	 *     produces+=DataValue '}' (ambiguity) 'transportComponentLocation' ':' location=Location
	 *     produces+=DataValue '}' (ambiguity) 'transportComponentParameter' parameter=Parameter
	 *     produces+=DataValue '}' (ambiguity) 'transportationComponentSub' '[' composedOf+=[InfrastructureComponent|ID]
	 *     produces+=DataValue '}' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_TransportationComponent_RightCurlyBracketKeyword_5_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '}'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     device+=Device ']' (ambiguity) 'TransportationComponent' name=EString
	 *     device+=Device ']' (ambiguity) 'transportComponentData' '{' produces+=DataValue
	 *     device+=Device ']' (ambiguity) 'transportComponentDevices' '[' device+=Device
	 *     device+=Device ']' (ambiguity) 'transportComponentLocation' ':' location=Location
	 *     device+=Device ']' (ambiguity) 'transportComponentParameter' parameter=Parameter
	 *     device+=Device ']' (ambiguity) 'transportationComponentSub' '[' composedOf+=[InfrastructureComponent|ID]
	 *     device+=Device ']' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_TransportationComponent_RightCurlyBracketKeyword_5_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
